openapi: 3.0.3
info:
  title: User consent management
  description: User consent management
  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0-wip
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/
security:
  - oAuth2ClientCredentials: []
servers:
  - url: '{apiRoot}/{basePath}'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: consent/v0
        description: Base path for user consent management
paths:
  /consents:
    post:
      tags:
        - Consent management
      summary: Creates a consent record
      description: Create a user consent record
      operationId: createConsent
      requestBody:
        description: Parameters to create a consent record
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateConsentRecord"
#      examples:
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRecord'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '409':
          $ref: '#/components/responses/Generic409'
        '500':
          $ref: '#/components/responses/Generic500'
        '501':
          $ref: "#/components/responses/Generic501"
        '503':
          $ref: '#/components/responses/Generic503'

  /consents/{consent-id}:
    patch:
      tags:
        - Consent management
      summary: Updates a consent record
      description: Updates a consent record
      operationId: updateConsent
      parameters:
        - name: consent-id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ConsentId"
      requestBody:
        description: Parameters to update a consent record
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateConsentRecord"
      #            examples:
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRecord'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
        '500':
          $ref: '#/components/responses/Generic500'
        '501':
          $ref: "#/components/responses/Generic501"
        '503':
          $ref: '#/components/responses/Generic503'

    get:
      tags:
        - Consent management      
      summary: Retrieves a consent record
      description: Retrieves a consent record
      operationId: getConsent
      parameters:
        - name: consent-id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ConsentId"
      responses:
        '200':
          description: Consent record found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRecord'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
        '500':
          $ref: '#/components/responses/Generic500'
        '501':
          $ref: "#/components/responses/Generic501"
        '503':
          $ref: '#/components/responses/Generic503'
     
components:
  securitySchemes:
    oAuth2ClientCredentials:
      description: OAuth2 client credentials flow         
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: "{tokenUrl}"
          scopes: {}  
          
  schemas:
    CreateConsentRecord:
      description: Attributes required to create a consent record
      type: object
      required:
        - appId
        - policyId
        - dataSubject
        - consentStatus
      properties:
        applicationId:
          $ref: '#/components/schemas/ApplicationId'
        purpose:
          $ref: '#/components/schemas/Purpose'
        scope:
          $ref: '#/components/schemas/Scope'
        dataSubject:
          $ref: '#/components/schemas/DataSubject'
        legalGuardian:
          $ref: '#/components/schemas/LegalGuardian'
        consentStatus:
          $ref: '#/components/schemas/ConsentStatus'
        consentChannel:
          $ref: '#/components/schemas/ConsentChannel'
        consentDateTime:
          $ref: '#/components/schemas/ConsentDateTime'
        consentExpiryDate:
          $ref: '#/components/schemas/ConsentExpiryDate'
        legalText:
          $ref: '#/components/schemas/LegalText'

    ConsentRecord:
      description: Attributes of a consent record
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateConsentRecord'
        - type: object
          required:
            - consentId
          properties:
            consentId:
              $ref: '#/components/schemas/ConsentId'

    UpdateConsentRecord:
      description: Attributes to update a consent record
      type: object
      required:
        - consentStatus
      properties:
        consentStatus:
          $ref: '#/components/schemas/ConsentStatus'
        consentDateTime:
          $ref: '#/components/schemas/ConsentDateTime'
        consentExpiryDate:
          $ref: '#/components/schemas/ConsentExpiryDate'

    ConsentId:
      description: Consent identifier
      type: string
      format: uuid

    ApplicationId:
      description: Application identifier
      type: string  

    Purpose:
      description: The purpose of the API usage
      type: string
      
    Scope:
      description: The scope of the API usage
      type: string

    DataSubject:
      description: Data subject
      type: object
      required:
        - phoneNumber
      properties:
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'         
          
    LegalGuardian:
      description: The authentication device
      type: object     
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        subscriberId:
          $ref: "#/components/schemas/SubscriberId"    

    SubscriberId:
      description: Subscriber identifier
      type: string

    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, optionally prefixed with '+'.
      type: string
      pattern: '^\+?[0-9]{5,15}$'
      example: "123456789"

    ConsentStatus:
      description: Consent granted or denied
      type: string
      enum:
        - GRANTED
        - DENIED
        
    ConsentChannel:
      description: Communication channel for granting the consent 
      type: string

    ConsentDateTime:
      description: Date time of the user consent. Current time is used, if missing.
      type: string
      format: date-time
      example: 2023-05-30T10:18:28Z

    ConsentExpiryDate:
      description: Date time when the consent will expire. No expiry, if missing.
      type: string
      format: date-time
      example: 2023-05-30T10:18:28Z

    LegalText:
      description: Legal text for user consent
      type: object
      properties: 
        id:
          $ref: '#/components/schemas/TextId'
        Version:
          $ref: '#/components/schemas/TextVersion'

    TextId:
      description: Text identifier
      type: string

    TextVersion:
      description: Text version
      type: string

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
  responses:
    Generic400:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: 'Invalid input'
    Generic401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 401
            code: UNAUTHENTICATED
            message: 'Authorization failed: ...'
    Generic403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 403
            code: PERMISSION_DENIED
            message: 'Operation not allowed: ...'
    Generic404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 404
            code: NOT_FOUND
            message: 'The specified resource is not found'
    Generic409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: CONFLICT
            message: "The specified resource is in a conflict"
    Generic500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 500
            code: INTERNAL
            message: 'Internal server error'
    Generic501:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 501
            code: NOT_IMPLEMENTED
            message: "Service not implemented"
    Generic503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 503
            code: UNAVAILABLE
            message: 'Service unavailable'
